// Generated by Haxe 3.4.5
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.exists = function(it,f) {
	var x = it.iterator();
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
var List = function() {
	this.length = 0;
};
List.__name__ = true;
List.prototype = {
	iterator: function() {
		return new _$List_ListIterator(this.h);
	}
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = true;
var _$List_ListIterator = function(head) {
	this.head = head;
};
_$List_ListIterator.__name__ = true;
_$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
};
var Main = function() {
	this.previousfromTop = 0;
	this.isRoot = window.location.pathname == "/";
	this.isHomepage = false;
	this.divMap = new haxe_ds_ObjectMap();
	this.divArr = [];
	var _gthis = this;
	window.console.log("MONK" + " - version: " + "0.3.0" + " - build: " + monk_model_constants_App.BUILD);
	$(window.document).ready(function(e) {
		if($("body").hasClass("monk-homepage")) {
			_gthis.isHomepage = true;
			_gthis.initHomepage();
			if(_gthis.isRoot) {
				_gthis.loadData();
			}
		} else {
			_gthis.initParallax();
		}
		_gthis.initScrollTo();
	});
	$(window).resize(function(e1) {
		window.console.debug("resized");
		if(_gthis.isHomepage) {
			_gthis.initHomepage();
		} else {
			_gthis.initParallax();
		}
	});
	$(window).scroll(function(e2) {
		if(_gthis.isHomepage) {
			_gthis.scrollHomepage();
		} else {
			_gthis.scrollParallax();
		}
	});
	var count = $(".post").length;
	if(count <= 0) {
		$("#toggle-text").hide();
	}
	$("#toggle-text").click(function(e3) {
		e3.preventDefault();
		if(Main.isTextVisible) {
			$(e3.currentTarget).html("<i class=\"fas fa-eye-slash fa-sm\"></i>");
			$(".post").fadeTo(500,0);
		} else {
			$(e3.currentTarget).html("<i class=\"fas fa-eye fa-sm\"></i>");
			$(".post").fadeTo(500,1);
		}
		Main.isTextVisible = !Main.isTextVisible;
	});
};
Main.__name__ = true;
Main.main = function() {
	var app = new Main();
};
Main.prototype = {
	initHomepage: function() {
		var _gthis = this;
		this.divArr = [];
		this.divMap = new haxe_ds_ObjectMap();
		var w = $(window).width();
		window.console.debug("width: " + w);
		$(".slide").each(function(i,el) {
			_gthis.divArr.push(this);
			_gthis.divMap.set(this,false);
		});
		this.updateHomepageImages(0,this.divArr[0]);
		this.scrollHomepage();
	}
	,rebuildHomepage: function(json) {
		var maxItems = 10;
		$("#main").html("<!-- reset -->");
		var itemArray = json.photos;
		Random.shuffle(itemArray);
		var divMain = "";
		if(maxItems >= itemArray.length) {
			maxItems = itemArray.length;
		}
		var _g1 = 0;
		var _g = maxItems;
		while(_g1 < _g) {
			var i = _g1++;
			divMain += itemArray[i].html;
		}
		$("#main").html(divMain);
		this.initHomepage();
	}
	,scrollHomepage: function() {
		var fromTop = $(window.document).scrollTop();
		var navHeight = $("nav").height();
		if(fromTop > navHeight) {
			$(".brand-name").addClass("brand-name-hide");
			$("#brand").addClass("brand-img-show");
			$("nav").addClass("hideup");
		}
		if(fromTop < navHeight) {
			$(".brand-name").removeClass("brand-name-hide");
			$("#brand").removeClass("brand-img-show");
			$("nav").removeClass("hideup");
		}
		if(fromTop < this.previousfromTop) {
			var distance = this.previousfromTop - fromTop;
			if(distance >= 100) {
				$(".brand-name").removeClass("brand-name-hide");
				$("#brand").removeClass("brand-img-show");
				$("nav").removeClass("hideup");
			}
		}
		if(fromTop >= this.previousfromTop) {
			this.previousfromTop = fromTop;
		}
		var _g1 = 0;
		var _g = this.divArr.length;
		while(_g1 < _g) {
			var i = _g1++;
			var div = this.divArr[i];
			var isDone = this.divMap.h[div.__id__];
			if(isDone) {
				continue;
			}
			var imgOffset = $(div).offset().top;
			var imgHeight = $(div).height();
			var imgBottomOffset = imgOffset + imgHeight;
			if(fromTop >= imgOffset && fromTop < imgBottomOffset) {
				this.updateHomepageImages(i,div);
			}
		}
	}
	,updateHomepageImages: function(id,div) {
		this.divMap.set(div,true);
		if(id + 1 > this.divArr.length) {
			return;
		}
		var _arr = [div,this.divArr[id + 1]];
		var _g1 = 0;
		var _g = _arr.length;
		while(_g1 < _g) {
			var i = _g1++;
			var _div = _arr[i];
			var folderSizeName = Std.string(monk_model_constants_App.photoFileSizeArray[monk_model_constants_App.photoFileSizeArray.length - 1]);
			var w = $(window).width();
			var _g3 = 0;
			var _g2 = monk_model_constants_App.photoFileSizeArray.length;
			while(_g3 < _g2) {
				var i1 = _g3++;
				var value = monk_model_constants_App.photoFileSizeArray[i1];
				if(w <= value) {
					if(value == null) {
						folderSizeName = "null";
					} else {
						folderSizeName = "" + value;
					}
				}
			}
			var dataFolder = $(_div).find("img").attr("data-folder");
			var dataImg = $(_div).find("img").attr("data-img");
			if(window.location.href.indexOf(dataFolder) != -1) {
				var img = $(_div).find("img").attr("src","" + folderSizeName + "/" + dataImg);
			} else {
				var img1 = $(_div).find("img").attr("src","" + dataFolder + "/" + folderSizeName + "/" + dataImg);
			}
		}
	}
	,initScrollTo: function() {
		var alist = $("a");
		var _g1 = 0;
		var _g = alist.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ahref = alist[i];
			var link = ahref.getAttribute("href");
			if(link == null) {
				continue;
			}
			if(link.indexOf("#") != -1 && link.length > 1) {
				$(ahref).addClass("scroll-to-content");
			}
		}
		$(".scroll-to-content").click(function(e) {
			var anchor = this.getAttribute("href");
			$("html, body").animate({ scrollTop : $(anchor.toString()).offset().top});
		});
	}
	,initParallax: function() {
		var padding = 0;
		var margin = 0;
		padding += Std.parseInt($(".parallax-container").parent().css("padding-left"));
		padding += Std.parseInt($(".parallax-container").parent().parent().css("padding-left"));
		padding += Std.parseInt($(".parallax-container").parent().parent().parent().css("padding-left"));
		margin += Std.parseInt($(".parallax-container").parent().css("margin-left"));
		margin += Std.parseInt($(".parallax-container").parent().parent().css("margin-left"));
		margin += Std.parseInt($(".parallax-container").parent().parent().parent().css("margin-left"));
		$(".parallax-container").css("left","-" + (padding + margin + 1) + "px");
		$(".parallax-container").css("width","" + $(window).width() + "px");
		$(".parallax img").css({ "display" : "block", "transform" : "translate3d(-50%, 0px, 0px)"});
		$(".parallax-container").attr("data-translate-y","0");
		this.scrollParallax();
	}
	,scrollParallax: function() {
		var fromTop = $(window.document).scrollTop();
		var _arr = $(".parallax-container");
		var _g1 = 0;
		var _g = _arr.length;
		while(_g1 < _g) {
			var i = _g1++;
			var containerOffset = $(_arr[i]).offset().top;
			var containerHeight = $(_arr[i]).height();
			var imageHeight = $(_arr[i]).find(".parallax img").height();
			if(imageHeight == 0) {
				haxe_Timer.delay($bind(this,this.scrollParallax),100);
				return;
			}
			var maxHeight33 = $(window).height() / 3 | 0;
			var height80 = imageHeight * 0.80 | 0;
			if(imageHeight <= containerHeight) {
				$(_arr[i]).height(height80);
			}
			if(height80 >= maxHeight33) {
				$(_arr[i]).height(maxHeight33);
			}
			var maxMove = containerOffset + containerHeight - (containerOffset - window.innerHeight);
			var currentMove = fromTop - (containerOffset - window.innerHeight);
			var percentage = currentMove / maxMove;
			var maxImageMove = imageHeight - containerHeight;
			if(fromTop <= containerOffset + containerHeight && fromTop + window.innerHeight >= containerOffset) {
				if($(_arr[i]).hasClass("parallax-not-visible")) {
					$(_arr[i]).removeClass("parallax-not-visible");
				}
				$(_arr[i]).addClass("parallax-visible");
			} else {
				if($(_arr[i]).hasClass("parallax-visible")) {
					$(_arr[i]).removeClass("parallax-visible");
				}
				$(_arr[i]).addClass("parallax-not-visible");
			}
			if($(_arr[i]).hasClass("parallax-visible")) {
				var ypos = maxImageMove * percentage;
				$(_arr[i]).find(".parallax img").css({ "transform" : "translate3d(-50%, " + ypos + "px, 0px)"});
			}
		}
	}
	,loadData: function() {
		var _gthis = this;
		console.log(this.isRoot);
		var url = "/data/photos.json";
		var req = new haxe_Http(url);
		req.onData = function(data) {
			try {
				var json = JSON.parse(data);
				console.log(json);
				_gthis.rebuildHomepage(json);
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				console.log(e);
			}
		};
		req.onError = function(error) {
			console.log("error: " + error);
		};
		req.onStatus = function(status) {
			console.log("status: " + status);
		};
		req.request(true);
	}
};
Math.__name__ = true;
var Random = function() { };
Random.__name__ = true;
Random.shuffle = function(arr) {
	if(arr != null) {
		var _g1 = 0;
		var _g = arr.length;
		while(_g1 < _g) {
			var i = _g1++;
			var j = Math.floor((arr.length - 1 + 1) * Math.random());
			var a = arr[i];
			var b = arr[j];
			arr[i] = b;
			arr[j] = a;
		}
	}
	return arr;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_Http = function(url) {
	this.url = url;
	this.headers = new List();
	this.params = new List();
	this.async = true;
	this.withCredentials = false;
};
haxe_Http.__name__ = true;
haxe_Http.prototype = {
	request: function(post) {
		var me = this;
		me.responseData = null;
		var r = this.req = js_Browser.createXMLHttpRequest();
		var onreadystatechange = function(_) {
			if(r.readyState != 4) {
				return;
			}
			var s;
			try {
				s = r.status;
			} catch( e ) {
				s = null;
			}
			if(s != null && "undefined" !== typeof window) {
				var protocol = window.location.protocol.toLowerCase();
				var rlocalProtocol = new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","");
				var isLocal = rlocalProtocol.match(protocol);
				if(isLocal) {
					if(r.responseText != null) {
						s = 200;
					} else {
						s = 404;
					}
				}
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				me.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				me.req = null;
				me.onData(me.responseData = r.responseText);
			} else if(s == null) {
				me.req = null;
				me.onError("Failed to connect or resolve host");
			} else {
				switch(s) {
				case 12007:
					me.req = null;
					me.onError("Unknown host");
					break;
				case 12029:
					me.req = null;
					me.onError("Failed to connect to host");
					break;
				default:
					me.req = null;
					me.responseData = r.responseText;
					me.onError("Http Error #" + r.status);
				}
			}
		};
		if(this.async) {
			r.onreadystatechange = onreadystatechange;
		}
		var uri = this.postData;
		if(uri != null) {
			post = true;
		} else {
			var _g_head = this.params.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var p = val;
				if(uri == null) {
					uri = "";
				} else {
					uri += "&";
				}
				var s1 = p.param;
				var uri1 = encodeURIComponent(s1) + "=";
				var s2 = p.value;
				uri += uri1 + encodeURIComponent(s2);
			}
		}
		try {
			if(post) {
				r.open("POST",this.url,this.async);
			} else if(uri != null) {
				var question = this.url.split("?").length <= 1;
				r.open("GET",this.url + (question ? "?" : "&") + uri,this.async);
				uri = null;
			} else {
				r.open("GET",this.url,this.async);
			}
		} catch( e1 ) {
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			me.req = null;
			this.onError(e1.toString());
			return;
		}
		r.withCredentials = this.withCredentials;
		if(!Lambda.exists(this.headers,function(h) {
			return h.header == "Content-Type";
		}) && post && this.postData == null) {
			r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		}
		var _g_head1 = this.headers.h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			var h1 = val1;
			r.setRequestHeader(h1.header,h1.value);
		}
		r.send(uri);
		if(!this.async) {
			onreadystatechange(null);
		}
	}
	,onData: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_Browser = function() { };
js_Browser.__name__ = true;
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") {
		return new XMLHttpRequest();
	}
	if(typeof ActiveXObject != "undefined") {
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	throw new js__$Boot_HaxeError("Unable to create XMLHttpRequest object.");
};
var monk_model_constants_App = function() { };
monk_model_constants_App.__name__ = true;
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = true;
Array.__name__ = true;
Main.isTextVisible = true;
haxe_ds_ObjectMap.count = 0;
monk_model_constants_App.photoFileSizeArray = [3840,2560,1920,1280,1024,640];
monk_model_constants_App.BUILD = "2018-06-15 17:12:41";
Main.main();
})();
