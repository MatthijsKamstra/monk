	function initGenerate(){
		Sys.println (':: ${App.MONK} :: generate');

		// [mck] load existing config
		config = Config.init('${projectFolder}/config.json');

		// copy files from "theme" the same folder in "www" / export folder
		copyFiles('${projectFolder}/${App.THEME_FOLDER_DEFAULT}', ['css','js']);

		var nav : String = '';

		// read projectfolder for files/folders
		var _rootProjectArr = FileSystem.readDirectory(projectFolder);
		_rootProjectArr = ignoreFilesOrFolders(_rootProjectArr); // ignore Monk generated files, only focus on folder with images
		for ( i in 0 ... _rootProjectArr.length ) {
			Sys.println('> folder used for MONK website: "${_rootProjectArr[i]}"');
			var html : String = '';

			// copy images to www folder
			var _folder = _rootProjectArr[i];
			copyFiles('${projectFolder}/$_folder', fileExtArr);

			nav += '<li><a href="../${_folder}">${_folder}</a></li>';

			// photos are copied, now check if there are aditional files there for the generation
			var _arr = ignoreFilesOrFolders(FileSystem.readDirectory('${projectFolder}/$_folder'), App.photoFileSizeArray);
			for ( i in 0 ... _arr.length ) {

				var fileOrFolder = _arr[i];

				var fileName = fileOrFolder.split('.')[0];
				var fileExt = fileOrFolder.split('.')[1].toLowerCase();

				if(fileName.startsWith(".")) continue; // ignore invisible (OSX) files like ".DS_Store"
				if(fileName.startsWith('_')) continue; // ignore files starting with "_"

				if(fileExtArr.indexOf(fileExt) != -1){

					// generate all photo size folders
					for ( i in 0 ... App.photoFolderArray.length ) {
						createDir('${App.EXPORT_FOLDER}/${_folder}/${App.photoFolderArray[i]}');
					}

					// check dimensions of file
					var p = new Process('identify', ['-format', '%w,%h', '${projectFolder}/${App.EXPORT_FOLDER}/$_folder/$fileOrFolder' ]);
					// read everything from stderr
					var error = p.stderr.readAll().toString();
					// trace("stderr:\n" + error);
					// read everything from stdout
					var stdout = p.stdout.readAll().toString();
					// trace("stdout:\n" + stdout);
					var _w = stdout.split(',')[0];
					var _h = stdout.split(',')[1];
					p.close(); // close the process I/O

					// [mck] TODO use the original size of the image
					// Sys.println('w:$_w / h:$_h');


					// map the current image name to these files (.md, .json, etc)
					var _json = '${projectFolder}/$_folder/' +  fileOrFolder.replace('.${fileExt}','.json');
					var _md ='${projectFolder}/$_folder/' +  fileOrFolder.replace('.${fileExt}','.md');
					var _postmd = '${projectFolder}/$_folder/' +  fileOrFolder.replace('.${fileExt}','_post.md');


					var json : PositionObj = null;
					var markdown1 = '';
					var markdown2 = '';
					var html1 = '';
					var html2 = '';
					var style = '';

					if(FileSystem.exists(_json)){
						json = haxe.Json.parse( sys.io.File.getContent(_json));
						// var html = Markdown.markdownToHtml(markdown);
						style = 'style="top: ${json.top}%; left: ${json.left}%; width: ${json.width}%; height: ${json.height}%"';
					}
					if(FileSystem.exists(_md)){
						markdown1 = sys.io.File.getContent(_md);
						html1 = Markdown.markdownToHtml(markdown1);
					}
					if(FileSystem.exists(_postmd)){
						markdown2 = sys.io.File.getContent(_postmd);
						html2 = Markdown.markdownToHtml(markdown2);
					}

					Sys.println('\t\t\tfound image "$fileOrFolder" added to index.html');

					var temp = _folder + '/' + App.THUMB + '/' +  fileOrFolder;

					html += '
						<div class="slide" data-width="$_w" data-height="$_h" style="background-image: url($temp);">
							<a name="1" class="internal"></a>
							<div class="post" ${style}>
								<div class="content">
									${html1}
								</div>
							</div>
							<img src="${_folder}/${App.THUMB}/${fileOrFolder}" class="full" data-folder="${_folder}" data-img="${fileOrFolder}" width="$_w" height="$_h">
						</div>
					'.replace('\t','').replace('\n',''); // strip tabs and returns

					if(isOverWrite || !FileSystem.exists('${projectFolder}/${App.EXPORT_FOLDER}/$_folder/${App.THUMB}/$fileOrFolder')){
						var temp = Sys.command('convert',[
							"-resize", "200x200",
							"-define", "filter:blur=5",
							'${projectFolder}/${App.EXPORT_FOLDER}/$_folder/$fileOrFolder', '${projectFolder}/${App.EXPORT_FOLDER}/$_folder/${App.THUMB}/$fileOrFolder'
						]);
						if(temp == 0){
							Sys.println('\t - thumb create for $fileOrFolder');
						} else {
							Sys.println('\t - something went wrong $temp');
						}
					}

					for ( i in 0 ... App.photoFileSizeArray.length ) {
						var size = App.photoFileSizeArray[i];
						// [mck] check if file exists and isOverWrite is true;
						if(isOverWrite || !FileSystem.exists('${projectFolder}/${App.EXPORT_FOLDER}/$_folder/${size}/$fileOrFolder')){
							Sys.println('\t - convert "$fileOrFolder" image to "$size" ');
							Sys.command('convert',[
								"-resize", '${size}x${size}',
								'${projectFolder}/${App.EXPORT_FOLDER}/$_folder/$fileOrFolder', '${projectFolder}/${App.EXPORT_FOLDER}/$_folder/${size}/$fileOrFolder'
							]);
						}
						if(isJpegOptim){
							Sys.println('\t - jpg optimize "$fileOrFolder" ');
							Sys.command('jpegoptim', [
								'${projectFolder}/${App.EXPORT_FOLDER}/$_folder/${size}/$fileOrFolder'
							]);
						}
					}

					FileSystem.deleteFile('${projectFolder}/${App.EXPORT_FOLDER}/$_folder/$fileOrFolder');

				}
			}

			var pnav =
			'<nav class="horizontal">
				<ul>
					<li><a href="project.html">Projects</a>
						<ul>
							'+nav+'
						</ul>
					</li>
					<li><a href="../about.html">About</a></li>
					<li><a href="../contact.html">Contact</a></li>
				</ul>
			</nav>
			';


			var str = haxe.Resource.getString('indexTemplate');
			if(isFirst){
				createWithGenTemplate(App.EXPORT_FOLDER, 'index.html', str, html,pnav,'<!--subnav-->');
				isFirst = false;
			}
			createWithGenTemplate(App.EXPORT_FOLDER + '/${_folder}', 'index.html', str, html.replace('${_folder}/',''),pnav,'<!--subnav-->','foo');

			// createPages();
		}
	}

